This example shows how to perform parsing and serialization as well as
use the object model when the Embedded C++/Hybrid mapping is configured
without support for STL, iostream, or C++ exceptions.

The example consists of the following files:

people.xsd
  XML Schema which describes a collection of person records.

people.xml
  Sample XML instance document.

people.hxx
people.cxx

people-pskel.hxx
people-pskel.cxx
people-pimpl.hxx
people-pimpl.cxx

people-pskel.hxx
people-pskel.cxx
people-pimpl.hxx
people-pimpl.cxx
  Object model (the first pair of files), parser skeletons (the second
  pair), parser implementations (the third pair), serializer skeletons
  (the fourth pair), and serializer implementations (the fifth pair).
  These files are generated by the XSD/e compiler from people.xsd. The
  --generate-parser, --generate-serializer, --generate-aggregate, 
  --no-stl, --no-iostream, and --no-exceptions options were used to
  request the generation of the parsing and  serialization code as well
  as to disable the use of STL, iostream, and C++ exceptions.

driver.cxx
  Driver for the example. It first calls the parser that constructs the
  object model from the input XML file. It then prints the content of
  the object model to STDERR. Finally, the driver modifies the object
  model and calls the serializer to serialize it back to XML.

To run the example on the sample XML instance document simply execute:

$ ./driver people.xml

The example reads from STDIN if input file is not specified:

$ ./driver <people.xml
